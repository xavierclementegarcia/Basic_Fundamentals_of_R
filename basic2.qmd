---
title: "Tablas y organización de datos"
subtitle: "Cómo ordenar tus datos sin morir en el intento"
author: "Xavier Clemente García"
format: 
  revealjs:
    theme: default
    footer: '<a href="https://xavierclementegarcia.github.io/Basic_Fundamentals_of_R/" target="_blank">Fundaments Basic R</a>'
echo: true
---

## ¿Qué es el Tidyverse? {.smaller}

El paquete tidyverse es una colección de diferentes paqueterías útiles en la ciencia de datos.

[![Figura 1. Introducción al Tidyverse. Tomado de Tidyverse.org](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRprxZquiGHsvvivkJ85FJu94iMUrZ37dI38w&s){fig-align="center" width="351"}](https://www.tidyverse.org/)

Este paquete es fundamental porque entre otras cosas contiene "readr" y "ggplot2". El primero se requiere para la lectura de tablas y bases de datos exportadas desde excel y el otro para la esquematización de gráficos.

## ¿Creación de tablas? {.smaller}

La creación de tablas puede ser un enfoque útil cuando necesitas esquematizar y organizar.Por ejemplo

```{r}
#| echo: false
nombres<-c("Xavier", "Daine", "Alexis", "Natalia")
apellidos<-c("García", "Guevara", "Paz", "Quintero")
carrera<-c("Biología", "Biología", "Biología","Biología" )
dataframe<-data.frame(nombres, apellidos, carrera)
dataframe
```

Sin embargo el código para una tabla como la anterior también podría complementarse cuantas veces sea necesario. Por ejemplo:

```{r}
#| echo: true
especies<-c("*Centruroides margaritatus*", "*Tityus pachyurus*", "*Tityus trivittatus*", "*centruroides gracilis*", "*Centruroides suffusus*")
ambiente<-c("luz", "luz", "luz", "sombra", "sombra")
Municipio<-c("Popayán", "Villa de Leyva", "Bogotá", "Argentina, Huila", "Inza")
Departamento<-c("Cauca", "Boyacá", "Cundinamarca", "Huila", "Cauca")
cantidad_de_individuos<-c(2,4,3,4,5)
frame_scorpions<- data.frame(especies, ambiente, Municipio, Departamento, cantidad_de_individuos)


```

En este punto tendremos un "data.frame" organizado según nuestras variables. Podremos añadir n variables.

##  {.smaller}

```{r}
#| echo: false
library(knitr)
kable(frame_scorpions)

```

Habremos obtenido nuestra tabla. Sin embargo ¿Queremos mantener esos nombres dados por las variables? NO,la respuesta es sencilla, pues no se ve bien y estético.

##  {.smaller}

Para ello haremos lo siguiente:

```{r}
#| echo: true
colnames(frame_scorpions)<-c("Especies", "Ambientes","Municipio", "Departamento", "No. de Individuos")
```

¿Qué hemos hecho aquí? Hemos sustituído las leyendas de nuestras columnas. Usamos "colnames" función que permite introducir nuestra variable data.frame "frame_scorpions". Por tanto nuestra tabla debería verse así para la siguiente diapositiva.

```{r}
#| echo: false
kable(frame_scorpions)
```

## Ejercicio práctico No. 1 {background-color="#806040"}

Dirígete a documentación en la página de este curso para obtener el ejercicio.

## Bases de datos {.smaller}

<br> 
La base de datos que encontrarás está basada en el trabajo de *Maria Doyle (2019)*.  
<br> 
**Sobre el contexto** Es una base de datos del proyecto **GREIN**: GEO RNA-seq Experiments Interactive Navigator. En esta webpage puede accederse a una amplia variedad de metadatos.
<br>
**Este trabajo será para realización en clase**


## Subiendo la base de datos {.smaller}

<br>
Presionar "Import Dataset". En este punto hay varias opciones:
1. Subir como .CSV
2. Subir como .xlx
3. Subir como .txt 
<br>

```{r}
#| echo: false
options(repos = c(CRAN = "https://cran.rstudio.com/"))
```
 
 Para subir como ".xlx" debe utilizarse: 
```{r}
#| echo: true
#Usar el paquete tidyverse 
install.packages("tidyverse")
library(tidyverse)
#O podemos correr solo "dplyr"
library(dplyr)
library(readxl)
```
 En Rstudio quizás no sea necesario que sepas esto. 
 **Para propósitos de nuestro plan de trabjo usaremos algunas bases de datos propias de R**
 

## Uso de la librería mtcars e introducción al dplyr {.smaller}

Cuando apliquemos la tabla... 
<br>

```{r}
#| echo: true
mtcars
#Convertimos en data.frame para una lectura ideal.
```
## Algunos comandos que puedes usar {.smaller}

```{r}
#| echo: true
#Para saber la estructura de los datos. Por ejemplo cuántos datos hay presentes.
str(mtcars)
#Nombres de las columnas. 
colnames(mtcars)
```

## Uso de la librería tibble {.smaller}
```{r}
#| echo: true
library(tibble)
tibble_tabla<-tibble(head(mtcars))
tibble_tabla
```
## Un poco sobre exploración de datos... {.smaller}

```{r}
#| echo: true
frame_scorpions
head(frame_scorpions)
```
## {.smaller}
```{r}
#| echo: true
head(mtcars)

```
Estos serían dos ejemplos con head().

## Filtrar datos

Volviendo con "mtcars"
```{r}
#| echo: true
#De la manera siguiente podemos filtrar datos según nuestro tipo de necesidad. 
mtcars %>% filter(mtcars$carb < 10)
```
## Uso del comando split {.smaller}

```{r}
#| echo: true

#A continuación dividiremos una tabla: 
mtcars_split<- split(mtcars, mtcars$mpg)
mtcars_split

```
Y así podemos cortar diferentes columnas del dataset "mtcars"

## Ejercicio práctico No. 2 {background-color="#806040"}

Crear una tabla o utilizar la dataset "mtcars"  y aplicar todo lo aprendido. 
Tienen el resto del día. 

## Referencias {.smaller}

[*Melbourne Bioinformatics. (2023) R for biologists GitHub*](https://melbournebioinformatics.github.io/r-intro-biologists)


